@model List<Mekaniko_Secured.Models.Dto.CarQuotationSummaryDto>

<h2>Customer Details</h2>

<div class="customer-car-details d-flex justify-content-between align-items-center container mt-3">
    <div class="left">
        <div class="group">
            <label asp-for="@Model[0].CustomerId"></label>
            <input asp-for="@Model[0].CustomerId" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].CustomerName"></label>
            <input asp-for="@Model[0].CustomerName" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].CustomerEmail"></label>
            <input asp-for="@Model[0].CustomerEmail" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].CustomerNumber"></label>
            <input asp-for="@Model[0].CustomerNumber" readonly />
        </div>
    </div>
    <div class="right">
        <div class="group">
            <label asp-for="@Model[0].CarId"></label>
            <input asp-for="@Model[0].CarId" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].CarRego"></label>
            <input asp-for="@Model[0].CarRego" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].MakeName"></label>
            <input asp-for="@Model[0].MakeName" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].CarModel"></label>
            <input asp-for="@Model[0].CarModel" readonly />
        </div>
        <div class="group">
            <label asp-for="@Model[0].CarYear"></label>
            <input asp-for="@Model[0].CarYear" readonly />
        </div>
       
    </div>
</div> 


<div class="container d-flex justify-content-between align-items-center mt-5">
    <div class="left">
        <h2>Quotations</h2>
    </div>
    <div class="right">
        <a class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#addQuotationModal"><i class="bi bi-plus-square-fill"></i> Quotation</a>
    </div>
</div>

<input id="ViewQuotationId"  />
<table class="table table-striped">
    <thead>
        <tr>
            <th class="text-center">Quotation ID</th>
            <th class="text-center">Issue</th>
            <th class="text-center">Date Added</th>
            <th class="text-center">Total Amount</th>
            <th class="text-center">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var quote in Model)
        {
            <tr>
                <td class="text-center">@quote.QuotationId</td>
                <td class="text-center">@quote.IssueName</td>
                <td class="text-center">@quote.DateAdded?.ToString("MM/dd/yyyy")</td>
                <td class="text-center">@quote.TotalAmount</td>
                <td class="text-center">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="actionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="visually-hidden">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="actionDropdown">
                            @*  <li>
                        <a href="#" class="dropdown-item view-invoice" data-invoice-id="@invoice.InvoiceId">
                        <i class="bi bi-eye"></i> Open Invoice
                        </a>
                        </li> *@
                           
                            <li>
                                <button class="dropdown-item view-pdf" data-invoice-id="@quote.QuotationId"><i class="bi bi-file-pdf"></i> View PDF</button>
                            </li>
                            <li>
                                <a href="#" class="dropdown-item download-pdf" data-invoice-id="@quote.QuotationId">
                                    <i class="bi bi-download"></i> Download PDF
                                </a>
                            </li>
                            <li>
                                <a href="#" class="dropdown-item send-invoice-email" data-invoice-id="@quote.QuotationId">
                                    <i class="bi bi-envelope-paper"></i> Send Email
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item btn-danger"><i class="bi bi-trash3-fill"></i> Delete Quotation</a>
                            </li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@Html.Partial("_GetCarQuotationModals")

@section Scripts {
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/jquery.validate.min.js"></script>
    <script>
        // Provide the CSRF token and URLs to your external script
        var csrfToken = $('input[name="__RequestVerificationToken"]').val();
        var addQuotationUrl = '@Url.Action("AddQuotationToCar", "Quotation")';

        // Global variable to keep track of the number of quotation items
        let itemIndex = 0;

        $(document).ready(function () {
            console.log('Document ready');

            // Event listener for the "Add Quotation" button
            $('.btn-warning[data-bs-target="#addQuotationModal"]').click(function () {
                console.log('Add Quotation button clicked');
                $('#addQuotationModal').modal('show');
                populateCustomerDetails();
            });

            // Event listener for the "Add Item" button
            $(document).on('click', '#addItemButton', function (e) {
                e.preventDefault();
                console.log('Add Item button clicked');
                addQuotationItem();
            });

            // Event listener for the "Save Quotation" button
            $('#saveQuotationBtn').click(function () {
                console.log('Save Quotation button clicked');
                if (validateForm()) {
                    submitQuotation();
                }
            });

            // Add event listeners for real-time calculation
            $('#quotationForm').on('input', '.calc-input', calculateTotals);
            $('#LaborPrice, #Discount, #ShippingFee').on('input', calculateTotals);
        });

        // Function to populate customer details when adding a quotation
        function populateCustomerDetails() {
            console.log('Populating customer details');
            var customerName = $('input[name="[0].CustomerName"]').val();
            var carRego = $('input[name="[0].CarRego"]').val();
            $('#CustomerName').val(customerName);
            $('#CarRego').val(carRego);
            console.log('Customer details populated:', { name: customerName, rego: carRego });
        }

        // Function to add a new quotation item to the form
        function addQuotationItem() {
            console.log('Adding new quotation item');
            const itemHtml = `
                <div class="quotation-item d-flex mb-3">
                    <div class="form-group">
                        <label for="QuotationItems[${itemIndex}].ItemName">Item Name</label>
                        <input name="QuotationItems[${itemIndex}].ItemName" class="form-control input" required />
                    </div>
                    <div class="form-group ms-4">
                        <label for="QuotationItems[${itemIndex}].Quantity">Quantity</label>
                        <input type="number" name="QuotationItems[${itemIndex}].Quantity" class="form-control quantity-input calc-input" required />
                    </div>
                    <div class="form-group ms-4">
                        <label for="QuotationItems[${itemIndex}].ItemPrice">Item Price</label>
                        <input type="number" name="QuotationItems[${itemIndex}].ItemPrice" class="form-control price-input calc-input" step="0.01" required />
                    </div>
                    <div class="form-group ms-4">
                        <label for="QuotationItems[${itemIndex}].ItemTotal">Item Total</label>
                        <input type="number" name="QuotationItems[${itemIndex}].ItemTotal" class="form-control total-input" readonly />
                    </div>
                </div>
            `;
            $('#quotationItems').append(itemHtml);
            itemIndex++;
            calculateTotals();
        }

        // Function to calculate totals for the quotation based on input values
        function calculateTotals() {
            console.log('Calculating totals');
            let subTotal = 0;
            $('.quotation-item').each(function () {
                const quantity = parseFloat($(this).find('.quantity-input').val()) || 0;
                const price = parseFloat($(this).find('.price-input').val()) || 0;
                const itemTotal = quantity * price;
                $(this).find('.total-input').val(itemTotal.toFixed(2));
                subTotal += itemTotal;
            });
            const laborPrice = parseFloat($('#LaborPrice').val()) || 0;
            const shippingFee = parseFloat($('#ShippingFee').val()) || 0;
            subTotal += laborPrice + shippingFee;
            $('#SubTotal').val(subTotal.toFixed(2));
            const discount = parseFloat($('#Discount').val()) || 0;
            const totalAmount = Math.max(subTotal - discount, 0);
            $('#TotalAmount').val(totalAmount.toFixed(2));
            console.log('Totals calculated:', { subTotal, totalAmount });
        }

        // Function to validate the form before submission
        function validateForm() {
            console.log('Validating form');
            let isValid = true;
            $('.error-message').remove();
            $('#quotationForm [required]').each(function () {
                if ($(this).val().trim() === '') {
                    isValid = false;
                    $(this).after('<span class="error-message text-danger">This field is required.</span>');
                }
            });
            if (!isValidDate($('#DateAdded').val())) {
                isValid = false;
                $('#DateAdded').after('<span class="error-message text-danger">Please enter a valid date.</span>');
            }
            console.log('Form validation result:', isValid);
            return isValid;
        }

        // Helper function to check if a date is valid
        function isValidDate(dateString) {
            var regEx = /^\d{4}-\d{2}-\d{2}$/;
            if (!dateString.match(regEx)) return false;
            var d = new Date(dateString);
            var dNum = d.getTime();
            if (!dNum && dNum !== 0) return false;
            return d.toISOString().slice(0, 10) === dateString;
        }

        // Function to submit the quotation form data via AJAX
        function submitQuotation() {
            console.log('Submitting quotation');
            const quotationData = {
                CarId: parseInt($('#CarId').val()),
                DateAdded: $('#DateAdded').val(),
                IssueName: $('#IssueName').val(),
                Notes: $('#Notes').val(),
                LaborPrice: parseFloat($('#LaborPrice').val()) || 0,
                Discount: parseFloat($('#Discount').val()) || 0,
                ShippingFee: parseFloat($('#ShippingFee').val()) || 0,
                SubTotal: parseFloat($('#SubTotal').val()) || 0,
                TotalAmount: parseFloat($('#TotalAmount').val()) || 0,
                QuotationItems: []
            };
            $('.quotation-item').each(function () {
                quotationData.QuotationItems.push({
                    ItemName: $(this).find('input[name$=".ItemName"]').val(),
                    Quantity: parseInt($(this).find('input[name$=".Quantity"]').val()) || 0,
                    ItemPrice: parseFloat($(this).find('input[name$=".ItemPrice"]').val()) || 0,
                    ItemTotal: parseFloat($(this).find('input[name$=".ItemTotal"]').val()) || 0
                });
            });
            console.log('Submitting quotation data:', quotationData);

            // AJAX request to submit quotation data to the server
            $.ajax({
                url: addQuotationUrl,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(quotationData),
                headers: {
                    'RequestVerificationToken': csrfToken
                },
                success: function (response) {
                    console.log('AJAX success response:', response);
                    if (response.success) {
                        alert('Quotation added successfully');
                        $('#addQuotationModal').modal('hide');
                        location.reload();
                    } else {
                        console.error('Server response:', response);
                        if (response.errors) {
                            let errorMessage = "Validation errors:\n";
                            for (let field in response.errors) {
                                errorMessage += `${field}: ${response.errors[field].join(', ')}\n`;
                            }
                            alert(errorMessage);
                        } else {
                            alert('Error: ' + response.message);
                        }
                    }
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error:', status, error);
                    console.error('Response:', xhr.responseText);
                    alert('An error occurred while adding the quotation');
                }
            });
        }

        // Function to clear the quotation form after submission or cancellation
        function clearQuotationForm() {
            console.log('Clearing quotation form');
            $('#quotationForm')[0].reset();
            $('#quotationItems').empty();
            itemIndex = 0;
            $('#SubTotal, #TotalAmount').val('');
            $('.error-message').remove();
            $('#DateAdded, #IssueName, #Notes, #LaborPrice, #Discount, #ShippingFee').val('');
            $('.quotation-item').remove();
            console.log('Quotation form cleared');
            populateCustomerDetails();
        }
    </script>
}